#+TITLE: Settings
#+STARTUP: indent
* Configurations
** Package Setup
*** Setup the package repositories.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

*** Automatically install and then setup =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))
#+END_SRC

** System names

#+BEGIN_SRC emacs-lisp
  (defun system-is-laptop ()
    "Return true if the system we are running on is mynotebook"
    (or
     (string-equal system-name "lenovo")
     )
    )

  (defun system-is-desktop ()
    "Return true if the system we are running on is mydesktop"
    (or
     (string-equal system-name "berton")
     )
    )
  (defun system-is-remote ()
    "Return true if the system we are running on is mydesktop"
    (or
     (string-equal system-name "pikachu")
     (string-equal system-name "centrium")
     )
    )
#+END_SRC

** Theme and fonts

#+BEGIN_SRC emacs-lisp
  (if (system-is-laptop)
      (set-frame-font "Source Code Pro-11" nil t))

  (if (system-is-desktop)
      (set-frame-font "Source Code Pro-12" nil t))

  (use-package zenburn-theme
    :init
    (setq zenburn-use-variable-pitch t)
    (setq zenburn-scale-org-headlines t)
    (setq zenburn-scale-outline-headlines t)
    (load-theme 'zenburn t))

#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Fabio Berton"
        user-mail-address "fbberton@gmail.com")
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :diminish auto-fill-function
    :diminish eldoc-mode
    :diminish abbrev-mode
    )
#+END_SRC

** GNU Elpa Keyring Update

#+BEGIN_SRC emacs-lisp
  (use-package gnu-elpa-keyring-update)
#+END_SRC

** General modifications

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-emacs 'yes-or-no-p)

  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "places"))
  (setq auto-save-default nil)
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")

  (windmove-default-keybindings)

  (global-auto-revert-mode t)
  (setq vc-follow-symlinks nil)

  (setq load-prefer-newer t)
  (setq create-lockfiles nil)

  (set-default 'truncate-lines t)
  (setq truncate-partial-width-windows nil)

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq require-final-newline t)
  (setq tab-always-indent 'complete)

  (setq large-file-warning-threshold nil)
#+END_SRC

*** Live reload of the settings, from inside of the Emacs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i")
                  (lambda()(interactive)
                    (org-babel-load-file "~/.emacs.d/settings.org")))
#+END_SRC

** Encoding

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+END_SRC

** Ui customizations

#+BEGIN_SRC emacs-lisp
  (if (system-is-laptop)
      (setq split-width-threshold 120))

  (blink-cursor-mode t)

  (setq-default cursor-type 'hbar)
  (setq ring-bell-function 'ignore)
  (setq scroll-conservatively 10)
  (setq scroll-margin 7)

  (menu-bar-mode -1)
  (tool-bar-mode -1)

  (if (display-graphic-p)
      (scroll-bar-mode -1))

  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq column-number-mode t)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

** Spelling

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode)
#+END_SRC

** Custom Keybindings

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Custom function

#+BEGIN_SRC emacs-lisp
  (defun buffer-cleanup ()
    (interactive)
    (whitespace-cleanup)
    (untabify (point-min) (point-max)))

  ;; Copy to clipboard
  (defun copy-to-clipboard ()
    "Copies selection to x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))
    )

  ;; Paste from clipboard
  (defun paste-from-clipboard ()
    (interactive)
    (if (display-graphic-p)
        (progn
          (clipboard-yank)
          (message "graphics active")
          )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    )

  (global-set-key (kbd "C-x c") 'copy-to-clipboard)
  (global-set-key (kbd "C-x v") 'paste-from-clipboard)

  ;; Indent commit messages
  (fset 'indent-commit
        (lambda (&optional arg) "Keyboard macro." (interactive "p")
          (kmacro-exec-ring-item (quote ([67108896 134217829 1 24 114 116 32 32 32 32 45 32 13] 0 "%d")) arg)))

  ;; Highlight tabs
  (defun highlight-tabs ()
    (interactive)
    (hi-lock-face-buffer "\t"))
  (defun unhighlight-tabs ()
    (interactive)
    (hi-lock-unface-buffer "\t"))
#+END_SRC

** Smarter navigation to the beginning of a line
- [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Reference]]
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+END_SRC

** Avoids saving active regions to the primary selection

#+BEGIN_SRC emacs-lisp
(setq select-active-regions nil)
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :custom
    ;; Always delete and copy recursively
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    :config
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
                    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                    (local-set-key (kbd "RET") #'dired-find-alternate-file)
                    (local-set-key (kbd "^")
                                   (lambda () (interactive) (find-alternate-file ".."))))))
#+END_SRC

** Editing

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :diminish global-whitespace-mode
    :init
    (setq whitespace-style
          '(face newline trailing space-before-tab space-after-tab))
    (global-whitespace-mode 1))

  (use-package browse-kill-ring
    :init
    (browse-kill-ring-default-keybindings))

  (use-package expand-region
    :bind
    ("M-=" . er/expand-region))

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)
      (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
      (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)))

  (use-package ws-butler
    :diminish ws-butler-mode
    :config
    (ws-butler-global-mode t))

  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (after-init . global-company-mode)
    :init
    (setq company-idle-delay              nil
          company-dabbrev-downcase          nil
          company-minimum-prefix-length     2
          company-show-numbers              t
          company-tooltip-limit             20
          company-tooltip-align-annotations t
          company-lsp-enable-snippet        t)
    :bind
    (:map prog-mode-map
          ("<tab>" . company-indent-or-complete-common)))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init (global-flycheck-mode))
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-mode-hook (lambda () (setq fill-column 72)))

  (use-package magit
    :defer t
    :init
    (global-git-commit-mode)
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
    :config
    (setq magit-commit-arguments (quote ("--signoff")))
    (setq magit-revert-arguments (quote ("--signoff")))
    (setq magit-diff-refine-hunk t)
    :bind
    ("C-x g" . magit-status))

  (use-package git-timemachine
    :defer t
    :bind
    ("C-c g" . git-timemachine))

  (use-package git-gutter
    :defer t
    :diminish git-gutter-mode
    :init
    (global-git-gutter-mode +1)
    (add-hook 'magit-post-refresh-hook
              #'git-gutter:update-all-windows))

  (use-package forge
    :after magit)
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :defer t )

  (use-package dts-mode
    :mode ("\\.dts\\'" "\\.dtsi\\'"))

  (use-package json-mode
    :mode ("\\.uhupkg.config\\'"))

  (use-package pkgbuild-mode
    :defer t )

  (use-package systemd
    :defer t )

  (use-package yaml-mode
    :mode ("\\.yaml\\'" "\\.yml\\'"))

  (use-package qml-mode
    :mode ("\\.qml\\'" ))

  (use-package qt-pro-mode
    :mode ("\\.pro\\'" "\\.pri\\'"))
#+END_SRC

** Navigation

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (require 'ido)
    (setq ido-auto-merge-work-directories-length -1)
    (setq ido-use-filename-at-point nil)
    (setq ido-use-faces nil)
    (ido-everywhere t)
    (ido-mode 1))

  (use-package flx-ido
    :config
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t))

  (use-package smex
    :init
    (smex-initialize)
    :config
    (setq smex-save-file (concat user-emacs-directory ".smex-items"))
    :bind
    ("M-x" . smex))
#+END_SRC

** Org
*** Make main Org command available everywhere
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** Org package configuration
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer t
    :init (require 'htmlize))

  (use-package ob-async
    :defer t
    :config
    (require 'ob-async))

  (defun endless/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))

  (use-package org
    :defer t
    :init
    (add-hook 'org-mode-hook 'turn-on-flyspell)
    (add-hook 'org-mode-hook #'endless/org-ispell)
    :config
    (setq org-confirm-babel-evaluate nil
          org-export-babel-evaluate 'inline-only)
    (setq org-src-tab-acts-natively t)
    (setq org-startup-with-inline-images t)
    (setq org-image-actual-width 600)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    (setq org-src-fontify-natively t)
    (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
        org-latex-minted-options '(("breaklines" "true")
                                   ("breakanywhere" "true")
                                   ("fontsize" "\\footnotesize")
                                   ("bgcolor" "white")
                                   ("obeytabs" "true")))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (gnuplot . t)
       (latex . t)
       (makefile . t)
       (org . t)
       (python . t)
       (shell . t)
       )))

  (require 'ox-beamer)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))

  (setq org-hide-emphasis-markers t)

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "DOING(s)" "|" "DONE(d!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "SOMEDAY"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("DOING" :foreground "yellow" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest red" :weight bold)
                ("SOMEDAY" :foreground "forest yellow" :weight bold))))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("DOING" ("DOING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD") ("DOING"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD") ("DOING"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD") ("DOING")))))

  (setq org-agenda-files '("~/org/engineering.org"
                           "~/org/todo.org"
                           "~/org/projects.org"))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/org/inbox.org" "Tasks")
                                 "* TODO %i%?")))

  (setq org-default-notes-file (concat org-directory "~/org/inbox.org"))

  (setq org-refile-targets '(("~/org/todo.org" :level . 1)
                             ("~/org/projects.org" :level . 1)))
#+END_SRC

*** Blogging with Org Mode and Jekyll on Github Pages
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(
          ("org-fbertux"
           :base-directory "~/workspace/fbertux.github.io/org"
           :base-extension "org"
           :publishing-directory "~/workspace/fbertux.github.io"
           :recursive t
           :publishing-function org-html-publish-to-html
           :with-toc nil
           :headline-levels 4
           :auto-preamble nil
           :auto-sitemap nil
           :html-extension "html"
           :body-only t
           )

          ("org-static-fbertux"
           :base-directory "~/workspace/fbertux.github.io/org"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
           :publishing-directory "~/workspace/fbertux.github.io"
           :recursive t
           :publishing-function org-publish-attachment)

          ("fbertux" :components ("org-fbertux" "org-static-fbertux"))
          ))
#+END_SRC

*** Blogging Org Mode with Hugo

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after ox)
#+END_SRC

*** Org Journal
- [[https://github.com/bastibe/org-journal][org-journal]]
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :defer t
    :bind
    ("C-c j n" . org-journal-new-entry)
    :config
    (setq org-journal-dir "~/org/journal/"
          org-journal-date-format "%A, %d %B %Y"))
#+END_SRC

*** Org-Noter
#+BEGIN_SRC emacs-lisp
  (use-package org-noter
    :defer t)
#+END_SRC

*** Org GitHub Markdown
#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :defer t
    :after org
    :init
    (require 'ox-gfm nil t))
#+END_SRC

*** References:
- https://superuser.com/questions/695096/how-to-enable-flyspell-in-org-mode-by-default
- https://endlessparentheses.com/ispell-and-org-mode.html
- http://doc.norang.ca/org-mode.html
- https://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes
- https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html

** Shell

#+BEGIN_SRC emacs-lisp
  (use-package sane-term
    :defer t
    :if window-system
    :bind
    ("C-x t" . sane-term)
    ("C-x T" . sane-term-create))

  (eval-after-load "term"
    '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))
#+END_SRC

** Bitbake

*** mmm-mode
#+begin_src emacs-lisp
  (use-package mmm-mode
    :defer t
    :diminish mmm-mode
    )

#+end_src

***  Bitbake Mode
#+BEGIN_SRC emacs-lisp
  (require 'mmm-mode)

  (defun bitbake-comment-dwim (arg)
    (interactive "*P")
    (require 'newcomment)
    (let ((comment-start "#") (comment-end ""))
      (comment-dwim arg)))

  (defvar bitbake-mode-syntax-table
    (let ((st (make-syntax-table)))
      ;; Comments start with # and end at eol
      (modify-syntax-entry ?#	  "<" st)
      (modify-syntax-entry ?\n  ">" st)
      (modify-syntax-entry ?\^m ">" st)
      (modify-syntax-entry ?\"  "\""  st) ;strings are delimited by "
      (modify-syntax-entry ?\'  "\""  st) ;strings are delimited by '
      (modify-syntax-entry ?\\  "\\"  st) ;backslash is escape
      st)
    "Syntax table for `bitbake-mode'.")

  (defvar bitbake-font-lock-defaults
    `((
       ;; fakeroot python do_foo() {
       ("\\b\\(include\\|require\\|inherit\\|python\\|addtask\\|export\\|fakeroot\\|unset\\)\\b" . font-lock-keyword-face)
       ;; do_install_append() {
       ("^\\(fakeroot *\\)?\\(python *\\)?\\([a-zA-Z0-9\-_+.${}/~]+\\) *( *) *{" 3 font-lock-function-name-face)
       ;; do_deploy[depends] ??=
       ("^\\(export *\\)?\\([a-zA-Z0-9\-_+.${}/~]+\\(\\[[a-zA-Z0-9\-_+.${}/~]+\\]\\)?\\) *\\(=\\|\\?=\\|\\?\\?=\\|:=\\|+=\\|=+\\|.=\\|=.\\)" 2 font-lock-variable-name-face)
       )))

  (define-derived-mode bitbake-mode shell-script-mode
    "Bitbake"
    :syntax-table bitbake-mode-syntax-table
    (setq font-lock-defaults bitbake-font-lock-defaults)
    (setq mode-name "BitBake")
    (define-key bitbake-mode-map [remap comment-dwim] 'bitbake-comment-dwim))

  (mmm-add-classes
   '((bitbake-shell
      :submode shell-script-mode
      :delimiter-mode nil
      :case-fold-search nil
      :front "^\\(?:fakeroot[[:blank:]]+\\)?\\([-[:alnum:]_${}]+[[:blank:]]*()[[:blank:]]*{\\)"
      :back "^}")
     (bitbake-python
      :submode python-mode
      :delimiter-mode nil
      :case-fold-search nil
      :front "^[ \t]*\\(?:fakeroot[ \t]+\\)?python[ \t]*\\(?:[ \t][^ \t]+[ \t]*\\)?([ \t]*)[ \t]*{[ \t]*\n"
      :back "^}")))

  (mmm-add-mode-ext-class 'bitbake-mode "\\.bb\\(append\\|class\\)?\\'" 'bitbake-shell)
  (mmm-add-mode-ext-class 'bitbake-mode "\\.bb\\(append\\|class\\)?\\'" 'bitbake-python)
  (mmm-add-mode-ext-class 'bitbake-mode "\\.inc\\" 'bitbake-shell)
  (mmm-add-mode-ext-class 'bitbake-mode "\\.inc\\" 'bitbake-python)
  (add-to-list 'auto-mode-alist
               '("\\.bb\\(append\\|class\\)?\\'" . bitbake-mode))
  (add-to-list 'auto-mode-alist
               '("\\.inc\\'" . bitbake-mode))
#+END_SRC

*** WKS support
#+begin_src emacs-lisp
(defgroup bitbake-wic nil "Customization options for wic." :group 'bitbake)

(defun wks-mode-font-lock-keywords ()
  "Return the default font lock keywords for `wks-mode2'."
   `("part" "bootloader" "include" "long-description" "short-description")
   )

;;;###autoload
(define-derived-mode wks-mode prog-mode "wks"
  :group 'bitbake-wic
  (set (make-local-variable 'comment-start) "#")
  (set (make-local-variable 'comment-start-skip) "#+[ \t]*")
  (set (make-local-variable 'comment-indent-function) 'comment-indent-default)
  (set (make-local-variable 'comment-style) 'plain)
  (set (make-local-variable 'comment-continue) nil)
  (setq-local font-lock-defaults '(wks-mode-font-lock-keywords))
  )

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.wks\\(.in\\)?\\'" . wks-mode))

(modify-syntax-entry ?# "<" wks-mode-syntax-table)
(modify-syntax-entry ?\n  ">" wks-mode-syntax-table)
(modify-syntax-entry ?\^m ">" wks-mode-syntax-table)
(modify-syntax-entry ?\"  "\""  wks-mode-syntax-table) ;strings are delimited by "
#+end_src

*** Reference:
https://bitbucket.org/olanilsson/bitbake-modes/src/master/
http://xemacs.sourceforge.net/Documentation/packages/html/mmm_toc.html#SEC_Contents

** C/C++

*** C mode
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :config
    (setq c-default-style "k&r")
    (setq c-basic-offset 4))
#+END_SRC

*** Custom Linux kernel style
#+begin_src emacs-lisp
  (defconst linux-kernel
    '((c-basic-offset . 8)
      (c-label-minimum-indentation . 0)
      (c-offsets-alist . (
                          (arglist-close         . c-lineup-arglist-tabs-only)
                          (arglist-cont-nonempty .
                                                 (c-lineup-gcc-asm-reg c-lineup-arglist-tabs-only))
                          (arglist-intro         . +)
                          (brace-list-intro      . +)
                          (c                     . c-lineup-C-comments)
                          (case-label            . 0)
                          (comment-intro         . c-lineup-comment)
                          (cpp-define-intro      . +)
                          (cpp-macro             . -1000)
                          (cpp-macro-cont        . +)
                          (defun-block-intro     . +)
                          (else-clause           . 0)
                          (func-decl-cont        . +)
                          (inclass               . +)
                          (inher-cont            . c-lineup-multi-inher)
                          (knr-argdecl-intro     . 0)
                          (label                 . -1000)
                          (statement             . 0)
                          (statement-block-intro . +)
                          (statement-case-intro  . +)
                          (statement-cont        . +)
                          (substatement          . +)
                          ))
      (indent-tabs-mode . t)
      (show-trailing-whitespace . t)))
  (c-add-style "linux-kernel" linux-kernel)
#+end_src

** PDF

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :if window-system
    :config
    (pdf-loader-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    (setq pdf-view-resize-factor 1.1)
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+END_SRC

** ibuffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)

  (setq ibuffer-saved-filter-groups
        '(("default"
           ("Bitbake"
            (or
             (filename . "\\.bb$")
             (filename . "\\.bbappend$")
             (filename . "\\.inc$")))
           ("Shell scripts"
            (or
             (mode . sh-mode)
             (mode . shell-mode)
             (mode . makefile-bsdmake-mode)
             (mode . makefile-imake-mode)
             (mode . makefile-automake-mode)
             (mode . makefile-gmake-mode)
             (mode . makefile-makeapp-mode)))
           ("Git" (or
                   (derived-mode . magit-mode)
                   (mode . diff-mode)))
           ("Org"
            (or (mode . org-mode)
                (filename . "OrgMode")))
           ("Markup"
            (or
             (mode . tex-mode)
             (mode . latex-mode)
             (mode . tex-fold-mode)
             (mode . tex-doctex-mode)
             (mode . context-mode)
             (mode . bibtex-style-mode)
             (mode . sgml-mode)
             (mode . css-mode)
             (mode . nxml-mode)
             (mode . html-mode)))
           ("Dired" (mode . dired-mode))
           ("Man pages"
            (mode . Man-mode))
           ("Shells"
            (or
             (mode . ansi-term-mode)
             (mode . term-mode)
             (mode . eshell-mode)
             (mode . shell-mode)))
           ("Emacs"
            (name . "^\*\.*\*\$"))
           )))

  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

** Latex

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :preface
    (defun apm-latex-mode-setup ()
      "Tweaks and customisations for LaTeX mode."
      (TeX-source-correlate-mode 1)
      (LaTeX-math-mode 1)
      (turn-on-reftex))
    (defun my-latex-mode-setup ()
      (setq-local company-backends
                  (append '((company-math-symbols-latex company-latex-commands))
                          company-backends)))
    :commands (LaTeX-math-mode TeX-source-correlate-mode)
    :mode ("\\.tex\\'" . LaTeX-mode)
    :hook
    ((LaTeX-mode . apm-latex-mode-setup)
     (LaTex-mode . my-latex-mode-setup))
    :init
    (setq-default TeX-auto-save t)
    (setq-default TeX-parse-self t)
    (setq-default TeX-PDF-mode t)
    (setq-default TeX-master nil)
    (setq-default flyspell-mode t)
    (setq-default TeX-source-correlate-start-server t))

  (use-package latex-preview-pane
    :defer t)
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :defer t
    :init (add-hook 'go-mode-hook
                    (lambda ()
                      (setq gofmt-command "goimports")
                      (add-hook 'before-save-hook 'gofmt-before-save)
                      (setq truncate-lines t)
                      (setq indent-tabs-mode t)
                      (setq tab-width 4))))

  (use-package go-eldoc
    :defer t
    :init (add-hook 'go-mode-hook 'go-eldoc-setup))

  (use-package go-guru
    :defer t
    :init (add-hook 'go-mode-hook 'go-guru-hl-identifier-mode))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown")
    (setq-default fill-column 80))
#+END_SRC

** Restore gc-cons-threshold
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+END_SRC
