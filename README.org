#+TITLE: Personal *GNU Emacs* configuration
#+STARTUP: indent

* Configurations

** Move customization away from =init.el=

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
#+end_src

** Package Setup
*** Setup the package repositories.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

*** Automatically install and then setup =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))
#+END_SRC

** exec-path-from-shell - [[https://github.com/purcell/exec-path-from-shell][Project Homepage]]

Make Emacs use the $PATH set up by the user's shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :defer 2
    :config
    (exec-path-from-shell-copy-env "EMACS_JENKINS_API_TOKEN")
    (exec-path-from-shell-copy-env "EMACS_JENKINS_URL")
    (exec-path-from-shell-copy-env "EMACS_JENKINS_USERNAME")
    )
#+end_src

** System names

#+BEGIN_SRC emacs-lisp
  (defun system-is-laptop ()
    "Return true if the system we are running on is mynotebook"
    (or
     (string-equal system-name "lenovo")
     )
    )

  (defun system-is-desktop ()
    "Return true if the system we are running on is mydesktop"
    (or
     (string-equal system-name "berton")
     )
    )
  (defun system-is-remote ()
    "Return true if the system we are running on is mydesktop"
    (or
     (string-equal system-name "pikachu")
     (string-equal system-name "centrium")
     )
    )
#+END_SRC

** Theme and fonts

#+BEGIN_SRC emacs-lisp
  (if (system-is-laptop)
      (set-frame-font "Source Code Pro-11" nil t))

  (if (system-is-desktop)
      (set-frame-font "Source Code Pro-12" nil t))

  (use-package zenburn-theme
    :init
    (setq zenburn-use-variable-pitch t)
    (setq zenburn-scale-org-headlines t)
    (setq zenburn-scale-outline-headlines t)
    (load-theme 'zenburn t))

#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Fabio Berton"
        user-mail-address "fbberton@gmail.com")
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :diminish auto-fill-function
    :diminish eldoc-mode
    :diminish abbrev-mode
    :diminish visual-line-mode
    )
#+END_SRC

** General modifications

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-emacs 'yes-or-no-p)

  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "places"))
  (setq auto-save-default nil)
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")

  (windmove-default-keybindings)

  (global-auto-revert-mode t)
  (setq vc-follow-symlinks nil)

  (setq load-prefer-newer t)
  (setq create-lockfiles nil)

  (set-default 'truncate-lines t)
  (setq truncate-partial-width-windows nil)

  (setq-default indent-tabs-mode nil
                tab-width 4)

  (setq require-final-newline t)
  (setq tab-always-indent 'complete)

  (setq large-file-warning-threshold nil)

  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

*** Live reload of the settings, from inside of the Emacs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i")
                  (lambda()(interactive)
                    (org-babel-load-file "~/.emacs.d/README.org")))
#+END_SRC

** Encoding

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+END_SRC

** Ui customization

#+BEGIN_SRC emacs-lisp
  (if (system-is-laptop)
      (setq split-width-threshold 120))
  (blink-cursor-mode -1)
  (setq-default cursor-type 'hbar)
  (setq ring-bell-function 'ignore)
  (setq scroll-conservatively 10)
  (setq scroll-margin 7)
  (setq column-number-mode t)
  (show-paren-mode 1)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :bind-keymap ("C-c p" . projectile-command-map)
    :hook (after-init . projectile-mode))
#+END_SRC

** Spelling

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode
    :hook
    (text-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode))
#+END_SRC

** Custom Keybindings

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Custom function

#+BEGIN_SRC emacs-lisp
  (defun buffer-cleanup ()
    (interactive)
    (whitespace-cleanup)
    (untabify (point-min) (point-max)))

  ;; Copy to clipboard
  (defun copy-to-clipboard ()
    "Copies selection to x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))
    )

  ;; Paste from clipboard
  (defun paste-from-clipboard ()
    (interactive)
    (if (display-graphic-p)
        (progn
          (clipboard-yank)
          (message "graphics active")
          )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    )

  (global-set-key (kbd "C-x c") 'copy-to-clipboard)
  (global-set-key (kbd "C-x v") 'paste-from-clipboard)

  ;; Indent commit messages
  (fset 'indent-commit
        (lambda (&optional arg) "Keyboard macro." (interactive "p")
          (kmacro-exec-ring-item (quote ([67108896 134217829 1 24 114 116 32 32 32 32 45 32 13] 0 "%d")) arg)))

  ;; Highlight tabs
  (defun highlight-tabs ()
    (interactive)
    (hi-lock-face-buffer "\t"))
  (defun unhighlight-tabs ()
    (interactive)
    (hi-lock-unface-buffer "\t"))
#+END_SRC

*** Copy buffer name or full path with name

#+begin_src emacs-lisp
(defun fb/copy-buffer-name ()
  (interactive)
  (kill-new (buffer-name)))

(defun fb/copy-buffer-full-name ()
  (interactive)
  (kill-new (buffer-file-name)))
#+end_src

** Smarter navigation to the beginning of a line
- [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Reference]]
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+END_SRC

** Avoids saving active regions to the primary selection

#+BEGIN_SRC emacs-lisp
(setq select-active-regions nil)
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired)
  :custom
  ;; Always delete and copy recursively
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  (auto-revert-verbose nil)
  ;; Quickly copy/move file in Dired
  (dired-dwim-target t)
  ;; Move files to trash when deleting
  (delete-by-moving-to-trash t)
  :config
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)
  :hook
  (dired-mode . (lambda ()
                  (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                  (local-set-key (kbd "RET") #'dired-find-alternate-file)
                  (local-set-key (kbd "^")
                                 (lambda () (interactive) (find-alternate-file ".."))))))
#+END_SRC

** Editing

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :diminish global-whitespace-mode
    :hook
    (after-init . global-whitespace-mode)
    :config
    (setq whitespace-style
          '(face newline trailing space-before-tab space-after-tab)))

  (use-package browse-kill-ring
    :bind ("M-y" . browse-kill-ring))

  (use-package expand-region
    :bind
    ("M-=" . er/expand-region))

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :diminish smartparens-mode
    :hook
    (after-init . smartparens-global-mode)
    :config
    (require 'smartparens-config))

  (use-package ws-butler
    :diminish ws-butler-mode
    :hook
    (after-init . ws-butler-global-mode))

  (use-package undo-tree
    :diminish undo-tree-mode
    :bind ("C-x u" . 'undo-tree-redo)
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (after-init . global-company-mode)
    :init
    (setq company-idle-delay                nil
          company-dabbrev-downcase          nil
          company-minimum-prefix-length     2
          company-show-numbers              t
          company-tooltip-limit             10
          company-tooltip-align-annotations t
          company-lsp-enable-snippet        t)
    :bind
    (:map prog-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :config
    (define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
    (delete 'company-clang company-backends))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :hook
    (after-init . global-flycheck-mode))
#+END_SRC

** Git

*** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (require 'git-commit)
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
    (add-hook 'git-commit-mode-hook (lambda () (setq fill-column 72)))
    (setq magit-diff-refine-hunk t)
    :bind ((("C-c g" . magit-file-dispatch))))
#+END_SRC

*** Forge

#+BEGIN_SRC emacs-lisp
  (use-package forge
    :after magit)
#+END_SRC

*** Git gutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :hook
    (after-init . global-git-gutter-mode)
    :config
    (add-hook 'magit-post-refresh-hook
              #'git-gutter:update-all-windows))
#+END_SRC

*** Magit Todo

Project homepage: [[https://github.com/alphapapa/magit-todos][Github]]

#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :after (magit)
    :config
    (setq magit-todos-exclude-globs '("*.map" "*.html")))
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode ("CmakeLists\\.txt'" "\\.cmake\\'"))

  (use-package dts-mode
    :mode ("\\.dts\\'" "\\.dtsi\\'"))

  (use-package json-mode
    :mode ("\\.uhupkg.config\\'" "\\.json\\'"))

  (use-package pkgbuild-mode
    :mode ("PKGBUILD\\'"))

  (use-package systemd
    :mode ("\\.automount\\'\\|\\.busname\\'\\|\\.mount\\'\\|\\.service\\'\\|\\.slice\\'\\|\\.socket\\'\\|\\.target\\'\\|\\.timer\\'\\|\\.link\\'\\|\\.netdev\\'\\|\\.network\\'\\|\\.override\\.conf.*\\'" . systemd-mode))

  (use-package yaml-mode
    :mode ("\\.yaml\\'" "\\.yml\\'"))

  (use-package qml-mode
    :mode ("\\.qml\\'" ))

  (use-package qt-pro-mode
    :mode ("\\.pro\\'" "\\.pri\\'"))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :mode ("/Dockerfile\\'"))

  (use-package docker-tramp
    :after tramp )
#+END_SRC

** Navigation

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (require 'ido)
    (setq ido-auto-merge-work-directories-length -1)
    (setq ido-use-filename-at-point nil)
    (setq ido-use-faces nil)
    (ido-everywhere t)
    (ido-mode 1))

  (use-package flx-ido
    :config
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t))

  (use-package smex
    :config
    (smex-initialize)
    (setq smex-save-file (concat user-emacs-directory ".smex-items"))
    :bind
    ("M-x" . smex))
#+END_SRC

** Org Mode

*** Org Mode settings

#+BEGIN_SRC emacs-lisp
  (use-package org
    :preface
    (defun endless/org-ispell ()
      "Configure `ispell-skip-region-alist' for `org-mode'."
      (make-local-variable 'ispell-skip-region-alist)
      (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
      (add-to-list 'ispell-skip-region-alist '("~" "~"))
      (add-to-list 'ispell-skip-region-alist '("=" "="))
      (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))

    :mode ("\\.org$" . org-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda))
    :hook ((org-mode . org-indent-mode)
           (org-indent-mode . (lambda() (diminish 'org-indent-mode))))
    :config
    (add-hook 'org-mode-hook 'turn-on-flyspell)
    (add-hook 'org-mode-hook #'endless/org-ispell)
    (setq org-confirm-babel-evaluate nil
          org-export-babel-evaluate 'inline-only)
    (setq org-src-tab-acts-natively t)
    (setq org-startup-with-inline-images t)
    (setq org-startup-indented t)
    (setq org-startup-folded t)
    (setq org-image-actual-width 600)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    (setq org-src-fontify-natively t)
    (setq org-src-preserve-indentation t)
    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
          org-latex-minted-options '(("breaklines" "true")
                                     ("breakanywhere" "true")
                                     ("fontsize" "\\footnotesize")
                                     ("bgcolor" "white")
                                     ("obeytabs" "true")))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (gnuplot . t)
       (latex . t)
       (makefile . t)
       (org . t)
       (python . t)
       (shell . t)
       )))

  (setq org-hide-emphasis-markers t)

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "DOING(s)" "|" "DONE(d!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "SOMEDAY"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("DOING" :foreground "yellow" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest red" :weight bold)
                ("SOMEDAY" :foreground "forest yellow" :weight bold))))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("DOING" ("DOING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD") ("DOING"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD") ("DOING"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD") ("DOING")))))

  (setq org-agenda-files '("~/org/engineering.org"
                           "~/org/todo.org"
                           "~/org/projects.org"))

  (setq org-capture-templates
        '(("b" "Bookmark" entry (file "~/org/bookmarks.org")
           "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
          ("B" "Bookmark with Cliplink" entry (file "~/org/bookmarks.org")
           "* %(org-cliplink-capture)\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
          ("t" "Todo" entry (file "~/org/inbox.org")
           "* TODO %?\n%U" :empty-lines 1)
          ("n" "Note" entry (file "~/org/inbox.org")
           "* NOTE %?\n%U" :empty-lines 1)))

  (setq org-default-notes-file (concat org-directory "~/org/inbox.org"))

  (setq org-refile-targets '(("~/org/todo.org" :level . 1)
                             ("~/org/projects.org" :level . 1)))

#+END_SRC

*** Org Mode  extra settings

**** [[https://github.com/rexim/org-cliplink][org-cliplink: Insert org-mode links from clipboard]]

Handle bookmark capture links.

#+begin_src emacs-lisp
  (use-package org-cliplink
    :commands (org-cliplink))
#+end_src

**** Add languages to =org-structure-template-alist=

#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil
    :after org
    :config
    (add-to-list 'org-structure-template-alist '("sl" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("ss" . "src sh")))
#+end_src

*** Org Babel

**** [[https://github.com/astahlman/ob-async][ob-async: Asynchronous src_block execution for org-babel]]

#+begin_src emacs-lisp
  (use-package ob-async
    :after org
    :config (require 'ob-async))
#+end_src

*** Org Export Engines

**** HTML back-End

#+begin_src emacs-lisp
  (use-package htmlize
    :after org
    :config (require 'htmlize))
#+end_src

**** Beamer back-End

#+begin_src emacs-lisp
  (use-package ox-beamer
    :ensure org
    :after ox
    :config
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+end_src

**** GitHub back-end

#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :after ox
    :config (require 'ox-gfm nil t))
#+END_SRC

**** Hugo back-end

#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :after ox)
#+END_SRC

*** [[https://github.com/bastibe/org-journal][org-journal: A simple org-mode based journaling mode]]

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :bind
    ("C-c j n" . org-journal-new-entry)
    :config
    (setq org-journal-dir "~/org/journal/"
          org-journal-date-format "%A, %d %B %Y"))
#+END_SRC

*** [[https://github.com/weirdNox/org-noter][org-noter: Emacs document annotator, using Org-mode]]

#+BEGIN_SRC emacs-lisp
  (use-package org-noter
    :commands (org-noter))
#+END_SRC

*** References:
- https://superuser.com/questions/695096/how-to-enable-flyspell-in-org-mode-by-default
- https://endlessparentheses.com/ispell-and-org-mode.html
- http://doc.norang.ca/org-mode.html
- https://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes
- https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html

** Shell

#+BEGIN_SRC emacs-lisp
  (use-package sane-term
    :if window-system
    :bind
    ("C-x t" . sane-term)
    ("C-x T" . sane-term-create))

  (eval-after-load "term"
    '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))
#+END_SRC

** Bitbake

*** mmm-mode
#+begin_src emacs-lisp
  (use-package mmm-mode
    :defer t
    :diminish mmm-mode
    )

#+end_src

*** Bitbake Mode
#+BEGIN_SRC emacs-lisp
  (require 'mmm-mode)

  (defun bitbake-comment-dwim (arg)
    (interactive "*P")
    (require 'newcomment)
    (let ((comment-start "#") (comment-end ""))
      (comment-dwim arg)))

  (defvar bitbake-mode-syntax-table
    (let ((st (make-syntax-table)))
      ;; Comments start with # and end at eol
      (modify-syntax-entry ?#	  "<" st)
      (modify-syntax-entry ?\n  ">" st)
      (modify-syntax-entry ?\^m ">" st)
      (modify-syntax-entry ?\"  "\""  st) ;strings are delimited by "
      (modify-syntax-entry ?\'  "\""  st) ;strings are delimited by '
      (modify-syntax-entry ?\\  "\\"  st) ;backslash is escape
      st)
    "Syntax table for `bitbake-mode'.")

  (defvar bitbake-font-lock-defaults
    `((
       ;; fakeroot python do_foo() {
       ("\\b\\(include\\|require\\|inherit\\|python\\|addtask\\|export\\|fakeroot\\|unset\\)\\b" . font-lock-keyword-face)
       ;; do_install_append() {
       ("^\\(fakeroot *\\)?\\(python *\\)?\\([a-zA-Z0-9\-_+.${}/~]+\\) *( *) *{" 3 font-lock-function-name-face)
       ;; do_deploy[depends] ??=
       ("^\\(export *\\)?\\([a-zA-Z0-9\-_+.${}/~]+\\(\\[[a-zA-Z0-9\-_+.${}/~]+\\]\\)?\\) *\\(=\\|\\?=\\|\\?\\?=\\|:=\\|+=\\|=+\\|.=\\|=.\\)" 2 font-lock-variable-name-face)
       )))

  (define-derived-mode bitbake-mode shell-script-mode
    "Bitbake"
    :syntax-table bitbake-mode-syntax-table
    (setq font-lock-defaults bitbake-font-lock-defaults)
    (setq mode-name "BitBake")
    (define-key bitbake-mode-map [remap comment-dwim] 'bitbake-comment-dwim))

  (mmm-add-classes
   '((bitbake-shell
      :submode shell-script-mode
      :delimiter-mode nil
      :case-fold-search nil
      :front "^\\(?:fakeroot[[:blank:]]+\\)?\\([-[:alnum:]_${}]+[[:blank:]]*()[[:blank:]]*{\\)"
      :back "^}")
     (bitbake-python
      :submode python-mode
      :delimiter-mode nil
      :case-fold-search nil
      :front "^[ \t]*\\(?:fakeroot[ \t]+\\)?python[ \t]*\\(?:[ \t][^ \t]+[ \t]*\\)?([ \t]*)[ \t]*{[ \t]*\n"
      :back "^}")))

  (mmm-add-mode-ext-class 'bitbake-mode "\\.bb\\(append\\|class\\)?\\'" 'bitbake-shell)
  (mmm-add-mode-ext-class 'bitbake-mode "\\.bb\\(append\\|class\\)?\\'" 'bitbake-python)
  (mmm-add-mode-ext-class 'bitbake-mode "\\.inc\\" 'bitbake-shell)
  (mmm-add-mode-ext-class 'bitbake-mode "\\.inc\\" 'bitbake-python)
  (add-to-list 'auto-mode-alist
               '("\\.bb\\(append\\|class\\)?\\'" . bitbake-mode))
  (add-to-list 'auto-mode-alist
               '("\\.inc\\'" . bitbake-mode))
#+END_SRC

*** WKS support
#+begin_src emacs-lisp
(defgroup bitbake-wic nil "Customization options for wic." :group 'bitbake)

(defun wks-mode-font-lock-keywords ()
  "Return the default font lock keywords for `wks-mode2'."
   `("part" "bootloader" "include" "long-description" "short-description")
   )

;;;###autoload
(define-derived-mode wks-mode prog-mode "wks"
  :group 'bitbake-wic
  (set (make-local-variable 'comment-start) "#")
  (set (make-local-variable 'comment-start-skip) "#+[ \t]*")
  (set (make-local-variable 'comment-indent-function) 'comment-indent-default)
  (set (make-local-variable 'comment-style) 'plain)
  (set (make-local-variable 'comment-continue) nil)
  (setq-local font-lock-defaults '(wks-mode-font-lock-keywords))
  )

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.wks\\(.in\\)?\\'" . wks-mode))

(modify-syntax-entry ?# "<" wks-mode-syntax-table)
(modify-syntax-entry ?\n  ">" wks-mode-syntax-table)
(modify-syntax-entry ?\^m ">" wks-mode-syntax-table)
(modify-syntax-entry ?\"  "\""  wks-mode-syntax-table) ;strings are delimited by "
#+end_src

*** Reference:
https://bitbucket.org/olanilsson/bitbake-modes/src/master/
http://xemacs.sourceforge.net/Documentation/packages/html/mmm_toc.html#SEC_Contents

** C/C++

*** C mode
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :mode (("\\.h\\(h\\|xx\\|pp\\)\\'" . c++-mode)
           ("\\.tpp\\'" . c++-mode))
    :config
    (setq c-default-style "k&r")
    (setq c-basic-offset 4))
#+END_SRC

** PDF

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :if window-system
    :config
    (pdf-loader-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    (setq pdf-view-resize-factor 1.1)
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+END_SRC

** Ibuffer

*** General modifications
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)

  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")

  (setq ibuffer-saved-filter-groups
        '(("default"
           ("Bitbake"
            (or
             (filename . "\\.bb$")
             (filename . "\\.bbappend$")
             (filename . "\\.inc$")))
           ("Shell scripts"
            (or
             (mode . sh-mode)
             (mode . shell-mode)
             (mode . makefile-bsdmake-mode)
             (mode . makefile-imake-mode)
             (mode . makefile-automake-mode)
             (mode . makefile-gmake-mode)
             (mode . makefile-makeapp-mode)))
           ("Git" (or
                   (derived-mode . magit-mode)
                   (mode . diff-mode)))
           ("Org"
            (or (mode . org-mode)
                (filename . "OrgMode")))
           ("Markup"
            (or
             (mode . tex-mode)
             (mode . latex-mode)
             (mode . tex-fold-mode)
             (mode . tex-doctex-mode)
             (mode . context-mode)
             (mode . bibtex-style-mode)
             (mode . sgml-mode)
             (mode . css-mode)
             (mode . nxml-mode)
             (mode . html-mode)))
           ("Dired" (mode . dired-mode))
           ("Man pages"
            (mode . Man-mode))
           ("Shells"
            (or
             (mode . ansi-term-mode)
             (mode . term-mode)
             (mode . eshell-mode)
             (mode . shell-mode)))
           )))

  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

*** Group tramp buffers
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-tramp
  :after (tramp)
  :config
  (progn
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-tramp-set-filter-groups-by-tramp-connection)
                (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
** Latex

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :preface
    (defun apm-latex-mode-setup ()
      "Tweaks and customisations for LaTeX mode."
      (TeX-source-correlate-mode 1)
      (LaTeX-math-mode 1)
      (turn-on-reftex))
    (defun my-latex-mode-setup ()
      (setq-local company-backends
                  (append '((company-math-symbols-latex company-latex-commands))
                          company-backends)))
    :commands (LaTeX-math-mode TeX-source-correlate-mode)
    :hook
    ((LaTeX-mode . apm-latex-mode-setup)
     (LaTex-mode . my-latex-mode-setup))
    :config
    (setq-default TeX-auto-save t)
    (setq-default TeX-parse-self t)
    (setq-default TeX-PDF-mode t)
    (setq-default TeX-master nil)
    (setq-default flyspell-mode t)
    (setq-default TeX-source-correlate-start-server t))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :config
    (setq markdown-command "multimarkdown")
    (setq-default fill-column 80))
#+END_SRC

** Olivetti

[[https://github.com/rnkn/olivetti][Olivetti:]] A simple Emacs minor mode for a nice writing environment.
#+begin_src emacs-lisp
  (use-package olivetti
    :defer t
    :config
    (setq olivetti-body-width 100))
#+end_src

** Nix

[[https://github.com/NixOS/nix-mode][nix-mode]]: An Emacs major mode for editing Nix expressions.

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** Jenkins - [[https://github.com/rmuslimov/jenkins.el][Project Homepage]]

Jenkins plugin for Emacs

#+begin_src emacs-lisp
  (use-package jenkins
    :commands (jenkins-mode)
    :after exec-path-from-shell
    :config
    (setq jenkins-api-token (getenv "EMACS_JENKINS_API_TOKEN"))
    (setq jenkins-url (getenv "EMACS_JENKINS_URL"))
    (setq jenkins-username (getenv "EMACS_JENKINS_USERNAME")))
#+end_src

** ERC

#+begin_src emacs-lisp
  (use-package erc
    :commands (bitlbee erc-tls erc-next-channel-buffer fb/erc-connect-all)
    :preface
    (defun fb/reset-erc-track-mode ()
      (interactive)
      (setq erc-modified-channels-alist nil)
      (erc-modified-channels-update))
    (global-set-key (kbd "C-c r") 'fb/reset-erc-track-mode)

    (defun fb/erc-connect-freenode ()
      "Connect to Freenode IRC network."
      (interactive)
      (erc :server "irc.freenode.net" :port 6667
           :nick "berton" :full-name "Fabio Berton"))

    (defun fb/erc-connect-gitter ()
      "Connect to Gitter IRC network."
      (interactive)
      (add-to-list 'erc-networks-alist '(gitter "irc.gitter.im"))
      (erc-tls :server "irc.gitter.im"
               :port 6697
               :nick "fbertux"
               :password nil))

    (defun fb/erc-connect-all ()
      "Connect to all configured IRC networks."
      (interactive)
      (fb/erc-connect-freenode)
      (fb/erc-connect-gitter))

    :config
    (require 'erc-join)
    (erc-autojoin-mode 1)
    (setq erc-autojoin-channels-alist
          '(("freenode.net" "#archlinux" "#beagle" "#etnaviv" "#gentoo"
             "#i3" "#nm" "#oe" "#qt ""#suckless" "#sway-devel" "#systemd"
             "#u-boot" "#wayland" "#wayvnc" "#yocto"
             )))

    (require 'erc-match)
    (setq erc-keywords '("berton"))
    (erc-match-mode)

    (require 'erc-track)
    (erc-track-mode t)

    (add-hook 'erc-mode-hook
              '(lambda ()
                 (require 'erc-pcomplete)
                 (pcomplete-erc-setup)
                 (erc-completion-mode 1)))

    (require 'erc-fill)
    (erc-fill-mode t)

    (require 'erc-ring)
    (erc-ring-mode t)

    (require 'erc-netsplit)
    (erc-netsplit-mode t)

    (erc-timestamp-mode t)
    (setq erc-timestamp-format "[%R-%m/%d]")

    (erc-button-mode nil) ;slow

    (setq erc-user-full-name "Fabio Berton")

    (add-to-list 'erc-modules 'notifications)

    ;; logging:
    (setq erc-log-insert-log-on-open nil)
    (setq erc-log-channels t)
    (setq erc-log-channels-directory "~/.erc/")
    (setq erc-save-buffer-on-part t)
    (setq erc-hide-timestamps nil)

    (defadvice save-buffers-kill-emacs (before save-logs (arg) activate)
      (save-some-buffers t (lambda () (when (and (eq major-mode 'erc-mode)
                                                 (not (null buffer-file-name)))))))

    (add-hook 'erc-insert-post-hook 'erc-save-buffer-in-logs)
    (add-hook 'erc-mode-hook '(lambda () (when (not (featurep 'xemacs))
                                           (set (make-variable-buffer-local
                                                 'coding-system-for-write)
                                                'emacs-mule))))
    ;; Truncate buffers so they don't hog core.
    (setq erc-max-buffer-size 20000)
    (defvar erc-insert-post-hook)
    (add-hook 'erc-insert-post-hook 'erc-truncate-buffer)
    (setq erc-truncate-buffer-on-save t)
    (setq whitespace-global-modes '(not erc-mode)))
#+end_src

- Reference: [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#irc][github.com/rememberYou]]

** ESUP - Emacs Start Up Profiler - [[https://github.com/jschaf/esup][Project Homepage]]

#+begin_src emacs-lisp
  (use-package esup
    :commands (esup))
#+end_src

** Pocket Reader

#+begin_src emacs-lisp
  (use-package pocket-lib
    :commands (pocket-reader)
    :config (setq pocket-lib-token-file (expand-file-name "~/.dotfiles/emacs/emacs-pocket-lib-token.json")))

  (use-package pocket-reader
    :commands (pocket-reader))
#+end_src

** Restore gc-cons-threshold

The garbage collector is set to a higher value in early-init.el file to reduce
startup time, set it back to a sane value.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1024 1024))
#+END_SRC
